var Persometer=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){e.exports=e=>{const t=e.container,n=e.statements,r=e.personas,o=e.options||{},s=r.reduce((e,t,n)=>(t.id&&(e[t.id]=n),e),{});statements.forEach(e=>{if(e.scores instanceof Array)return;const t=Array(r.length).fill(0);Object.keys(e.scores).forEach(n=>{const r=s[n];t[r]=e.scores[n]}),e.scores=t});const a=e=>{const t=new URL(window.location.href);t.searchParams.set("r",e),window.history.pushState(null,document.title,t.href)},l=e=>{const t=document.getElementById(e);$(t).empty(),$(t).append(`<div id="persometer-container-${e}" class="container persometer"></div>`);const n=$("#persometer-container-"+e);return o.title&&$(n).append(`\n                <div class="row">\n                    <div class="col-12">\n                        ${o.title}\n                    </div>\n                </div>\n            `),n},c=e=>{const r=l(e),o=document.createElement("form");o.onsubmit=((e,n)=>{n.preventDefault(),a($(e).serialize()),d(t,$(e).serializeArray())}).bind(this,o),r.append(o),n.forEach((e,t)=>{$(o).append(`\n                <div class="row persometer-statement">\n                    <div class="col-md-8 col-sm-7 persometer-statement-text">${e.text}</div>\n\n                    <div class="col-md-4 col-sm-5 btn-group btn-group-toggle persometer-statement-options" data-toggle="buttons">\n                        <label class="btn btn-secondary persometer-option persometer-agree">\n                            <input type="radio" name="${t}" id="${t}" value="1"> Agree\n                        </label>\n                        <label class="btn btn-secondary persometer-option persometer-disagree">\n                            <input type="radio" name="${t}" id="${t}" value="-1"> Disagree\n                        </label>\n                    </div>\n\n                </div>\n            `)}),$(o).append('<div class="row persometer-submit"><div class="col-12"><input class="btn btn-primary btn-block persometer-button" type="submit" /></div></div>')},d=(e,t)=>{const n=l(e);scores=p(t),h(n,scores),b(n,scores);const r=document.createElement("input");r.type="button",r.className="btn btn-primary btn-block persometer-button",r.onclick=f,r.value="Start over",$(n).append('\n            <div class="row persometer-reset">\n                <div class="col-12">',r,"</div>\n            </div>\n        "),$(n).append(r)},p=e=>{const t=new Array(r.length).fill(0);return e.forEach(e=>{const o=Number(e.value),s=n[Number(e.name)].scores;for(i=0;i<r.length;i++)t[i]+=o*s[i]}),t},m=()=>{const e=new Array(r.length).fill(0);return n.forEach(t=>{for(i=0;i<r.length;i++)e[i]+=Math.abs(t.scores[i])}),e},u=e=>{const t=e.indexOf(Math.max(...e));return r[t]},h=(e,t)=>{const n=u(t);let r="";n.image&&(r=`<div class="col"><img src="${n.image}" alt="" class="persometer-result-image" /></div>`);const o=`\n            <div class="row persometer-result">\n                ${r}\n                <div class="col">\n                    <h3 class="persometer-result-name">${n.name}</h3>\n                    <p class="persometer-result-desc">${n.description}</p>\n                </div>\n            </div>\n        `;$(e).append(o)},b=(e,t)=>{const n=(e=>{const t=m(),n=[];for(i=0;i<r.length;i++)n.push(e[i]/t[i]);return n})(t);let o='<div class="persometer-breakdown">';for(i=0;i<r.length;i++){const e=n[i],t=(100*Math.abs(e)).toFixed(0)+"%",s=e>=0?"agreement":"disagreement";o+=`\n                <div class="row persometer-breakdown-row">\n                    <div class="col-md-2 persometer-breakdown-persona">${r[i].name}</div>\n                    <div class="col-md-4 persometer-breakdown-text">${t} ${s}</div>\n                    <div class="col-md-6 persometer-breakdown-meter">${g(e)}</div>\n                </div>\n            `}o+="</table>",$(e).append(o)},g=e=>{const t='<span style="display: inline-block; height: 100%; width: calc(50% - 1px); margin: 0; background-color: lightgrey; border-right: 1px solid black"></span>',n=`<span style="display: inline-block; height: 100%; background-color: lightgrey; width: ${50-50*Math.abs(e)}%; margin: 0;"></span>`;let r="";if(e>0){r=`${t}${`<span style="display: inline-block; height: 100%; background-color: var(--green, green); width: ${50*Math.abs(e)}%; margin: 0;"></span>`}${n}`}else if(e<0){r=`${n}${`<span style="display: inline-block; height: 100%; background-color: var(--red, red); width: calc(${50*Math.abs(e)}% - 1px); border-right: 1px solid black; margin: 0;"></span>`}<span style="display: inline-block; height: 100%; width: 50%; margin: 0; background-color: lightgrey;"></span>`}else r=`${t}${n}`;return`\n            <span style="height: 80%; width: 100%; display: inline-block">${r}</span>\n        `},f=()=>{a(""),c(t)};return{render:()=>{const e=(e=>{const t=new URL(e).searchParams.get("r");if(!t)return!1;const n=[];return t.split("&").forEach(e=>{const t=e.split("=");n.push({name:t[0],value:t[1]})}),n})(window.location.href);e?d(t,e):c(t)},reset:f,validate:()=>{[function(){let e=!0;n.forEach(t=>{const n=t.scores.length;n!=r.length&&(console.error(`Persometer: NOT OK: Invalid score length ${n} for statement ${t}, should be ${r.length}`),e=!1)}),e&&console.log("Persometer: OK: statement score lengths")},function(){const e=m();e.filter(e=>0==e).length>0?console.error("Persometer: NOT OK: Found zeros in the maximum scores:",e):console.log("Persometer: OK: all results have some scores allocated")},function(){let e=!0;const t=[];r.forEach(n=>{n.id&&-1===t.indexOf(n.id)?t.push(n.id):(console.error(`Persometer: NOT OK: persona id ${n.id} used multiple times`),e=!1)}),e&&console.log("Persometer: OK: persona ids are unique")}].forEach(e=>e())},statistics:e=>{let t=e||1e3;const o=2**n.length;let s=o,a=!1;o>t?(console.log(`Persometer: There are ${o} possible answer combinations, will randomly sample ${t}`),s=t,a=!0):console.log(`Persometer: There are ${o} possible answer combinations, will tabulate all of them`);const i=r.reduce((e,t)=>(e[t.name]=0,e),{});for(let e=0;e<s;e++){let t=(a?Math.floor(Math.random()*(o+1)):e).toString(2).split("");const r=n.length-t.length;for(let e=0;e<r;e++)t.unshift("0");const s=[];n.forEach((e,n)=>{s.push({name:n,value:"1"==t[n]?1:-1})});const l=p(s),c=u(l);i[c.name]+=1}console.log("Persometer: Expected persona distribution if all statements answered at random:"),Object.keys(i).forEach(e=>{i[e]=i[e]/s*100,console.log(`Persometer:    ${i[e].toFixed(2)}%  ${e}`)})}}}}]);